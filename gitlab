#!/bin/bash

# Janusz Ładecki <szunaj13pl@gmail.com>
# Created on 21.09.2017

gitlab_version=18.1.23.1025
github_url='https://github.com/szunaj13pl/shell-gitlab'
gitlab_config_folder="$HOME/.config/gitlab"

function initial(){
    
    local scriptName=$(basename $0)
    scriptServerVersion=$(mktemp -d /tmp/$scriptName.XXXXXX)
    gitlabScript=$(mktemp /tmp/$scriptName.XXXXXX)
    gitlabNames=$(mktemp /tmp/$scriptName.XXXXXX)
    gitlabGit=$(mktemp /tmp/$scriptName.XXXXXX)
    gitlabJson=$(mktemp /tmp/$scriptName.XXXXXX)
    
    # Use colors, but only if connected to a terminal, and that terminal
    # supports them.
    if which tput >/dev/null 2>&1; then
        ncolors=$(tput colors)
    fi
    if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        BOLD="$(tput bold)"
        NORMAL="$(tput sgr0)"
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        NORMAL=""
    fi
    
}


versionCompare() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            
            return 2
        fi
    done
    
    return 0
    
}


function getServerVersion(){
    
    git clone "$github_url" "$scriptServerVersion"
    
}


function refreshDefaultConfigFile(){
    
    cp "${scriptServerVersion}/default_config" "${gitlab_config_folder}/default_config"\
    && mv "${gitlab_config_folder}/config" "${gitlab_config_folder}/config.bak"
    
    if [ ! -s "${gitlab_config_folder}/config" ]; then
        cp "${gitlab_config_folder}/default_config" "${gitlab_config_folder}/config"
    fi
}


function checkConfig(){
    
    if [ ! -s "${gitlab_config_folder}/config" ]; then
        
        mkdir -p "$gitlab_config_folder" || echo "Can not create default config at ${gitlab_config_folder}/config" && echo "Default config was created"
        
        getServerVersion && refreshDefaultConfigFile
        
    else
        
        # Get variables from config [GITLAB_TOKEN, GITLAB_URL]
        source "${gitlab_config_folder}/config"
    fi
    
}


function checkLastUpdateDate(){
    
    if [ $autoupdate == true ] || [ "$just_update" == true ]; then
        
        # Get last update date from config
        local last_update_date=$(cat "${gitlab_config_folder}/config" | grep --perl-regexp  'last_update_date\=([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})' | cut -d "=" -f 2)
        local current_date="$(date +%F)"
        
        if [[ ! "$current_date" == "$last_update_date" ]] || [ "$just_update" == true ]
        then
            echo "Check for update" && checkOnlineVersion
            sed -E -i "s/last_update_date\=([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})/last_update_date\=$current_date/" "${gitlab_config_folder}/config"\
            || echo "Missing 'last_update_date' parameter in ${gitlab_config_folder}/config"
        fi
        
    else
        
        echo -e "Autoupdate is${RED} OFF ${NORMAL}"
    fi
    
}


function checkOnlineVersion(){
    
    ping -c 2 Github.com 2>>/dev/null 1>&2 || (echo -e "Github.com ${RED} Unrechable ${NORMAL}" && exit 1)
    
    getServerVersion
    
    local server_version=$(cat "${scriptServerVersion}/gitlab" | grep --max-count=1 'gitlab_version' |  cut -d "=" -f 2)
    
    versionCompare $gitlab_version $server_version || (echo "New wersion on GitHub" && replaceLocalScript $server_version )
}

function replaceLocalScript(){
    
    local online_version="$1"
    local script_full_path=$(which gitlab | head -n 1)
    
    cp "$script_full_path" "${script_full_path}.bak" \
    && cp "${scriptServerVersion}/gitlab" $(dirname $script_full_path) \
    && refreshDefaultConfigFile
    
    # Cleaning
    rm -rf "$scriptServerVersion" "${script_full_path}.bak"
    
    gitlab && exit 0
}


function aptpro() {
    # Waits if dpkg is busy
    
    i=0
    tput sc
    while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
        case $(($i % 4)) in
            0 ) j="-" ;;
            1 ) j="\\" ;;
            2 ) j="|" ;;
            3 ) j="/" ;;
        esac
        tput rc
        echo -en "\r[ ${RED}$j ${NORMAL}] ${YELLOW} Waiting for other software managers to finish... ${NORMAL}"
        sleep 0.5
        ((i=i+1))
    done
    
    echo -e "\n"
    sudo /usr/bin/apt-get "$@"
}


function isInstalled(){
    
    local packagesName=$@
    
    for package in $packagesName; do
        INSTALLED=$(dpkg-query -s "$package" 2>&1 | grep --no-messages Status )
        if [ "$INSTALLED" != "Status: install ok installed" ]; then
            echo -e "${NORMAL} $package ${RED}not installed ${NORMAL}"
            aptpro install -y "$package"
        fi
    done
    
}


function preRunCheck(){
    
    if [ -z "$GITLAB_URL" ]; then
        echo -e "${RED}Please set the environment variable GITLAB_URL ${NORMAL}"
        exit 1
    fi
    
    if [ -z "$GITLAB_PRIVATE_TOKEN" ]; then
        echo -e "${RED}Please set the environment variable GITLAB_PRIVATE_TOKEN ${NORMAL}"
        echo "See ${GITLAB_URL}/profile/account"
        exit 1
    fi
    
    ping -c 2 "$GITLAB_URL" 2>>/dev/null 1>&2 || (echo -e "$GITLAB_URL ${RED} Unrechable ${NORMAL}" && exit 1) || exit 1
    
}


function getData(){
    
    local responseCode=$(curl -s -o "$gitlabJson" -w "%{http_code}" "https://${GITLAB_URL}/api/v3/projects?private_token=$GITLAB_PRIVATE_TOKEN&search=$PROJECT_SEARCH_PARAM&per_page=999&sort=asc&order_by=name")
    
    if [ ! "$responseCode" == 200 ];then
        echo -e "$GITLAB_URL ${RED} Response code $responseCode ${NORMAL}\n"
        cat "$gitlabJson"
        exit 1
    fi
    
    local online=$(cat "$gitlabJson" | jq --raw-output --compact-output '.[] | { "name": .name, "path": .path, "git": .ssh_url_to_repo }' )
    
    formatData "$online"
}


function formatData(){
    
    local online="$1"
    i=1
    echo "$online" | while read line;do
        
        git="$(echo $line | jq -r ".git")"
        echo -e "$i) git clone --progress --recursive --verbose $git ;;" >> "$gitlabGit"
        
        name="$(echo $line | jq -r ".name")"
        local projects_names=$(echo $i" "\""$name"\" "off" >> "$gitlabNames")
        
        i=$[i+1]
        
    done
}


function createGui(){
    
    local projects_names="$(cat $gitlabNames)"
    
cat >> "$gitlabScript" <<- EndOfScript
#!/bin/bash

# Janusz Ładecki <szunaj13pl@gmail.com>
# 21.09.2017

echo $i

function measureScreen(){
    rows=$(tput lines)
    cols=$(tput cols)
}

function createGui(){
    local TYPE="checklist"
    local HEIGHT=\$((rows - 3))
    local WIDTH=\$(( cols / 2))
    local CHOICE_HEIGHT=\$(( rows - 5))
    local MENU="by Janusz Ładecki\n\nChoose repo to clone:"

    local OPTIONS=($(cat $gitlabNames))

        local CHOICES=\$(dialog  --separate-output --checklist   \
                "\$MENU" \
                \$HEIGHT \$WIDTH \$CHOICE_HEIGHT \
                "\${OPTIONS[@]}" \
                2>&1 >/dev/tty)

    clear

    for choice in \$CHOICES
    do
        case \$choice in

EndOfScript
    
    # Insert git clone commands
    cat "$gitlabGit" >> "$gitlabScript"
    # Apend closing for 'for, case, function'
    echo -e "\n\t esac \n done \n} \n measureScreen \n createGui" >> "$gitlabScript"
    
}


function run(){
    # less "$gitlabScript"
    chmod +x "$gitlabScript"
    "$gitlabScript"
}


usage() {
    echo "Usage: $(basename $0) [ -c 'edit configuration' ] [ -d 'enable debuging mode' ] [ -u 'self update' ] [ <string> 'to search repository' ]" \
    1>&2; exit 1;
}

while getopts ":dcu" o; do
    case "${o}" in
        d)
            echo "Debug mode is ON"
            
            set -x ;
            set -o functrace
        ;;
        c)
            if [ -e "${gitlab_config_folder}/config" ]; then
                $EDITOR "${gitlab_config_folder}/config"
            else
                checkConfig
                $EDITOR "${gitlab_config_folder}/config"
            fi
            
            exit 0
        ;;
        u)
            just_update=true
        ;;
        *)
            usage
        ;;
    esac
done
shift $((OPTIND-1))

PROJECT_SEARCH_PARAM="$1"


# Defines variables and create temp files
initial

# Install requierd programs
isInstalled curl git jq dialog

# Check if config exist
checkConfig

# Check for new update
checkLastUpdateDate

[ "$just_update" == true ] && exit 0

# Check if all variables ar defined and server is online
preRunCheck

# Request data and format data
getData

# Display results list of repositories
createGui

# Add premissions to execute and run script
run

# Cleaning
rm -f "$gitlabNames" "$gitlabGit" "$gitlabScript"
